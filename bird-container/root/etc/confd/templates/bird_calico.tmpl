{{- $rack_no := getenv "RACK" -}}
{{- $bgpd_mode := getenv "BGPD_MODE" -}}
{{- $local_ipaddr := getenv "IP" -}}
{{- $local_hostname := getenv "HOSTNAME" -}}
{{- $p_calico := getenv "PREFIX_CALICO" "/calico/bgp/v1" -}}
{{- $p_mr := getenv "PREFIX_MULTIRACK" "/multirack_topology" -}}
{{- $rr_bgp_port := getenv "RR_BGP_PORT" "179" -}}
{{- $node_bgp_port := getenv "NODE_BGP_PORT" "179" -}}
{{- $tor_bgp_port := getenv "TOR_BGP_PORT" "179" -}}
{{- $global_asnum := getv (printf "%s/global/as_num" $p_calico) "65000" -}}

# bird.conf for node '{{$local_hostname}}'

# Configure logging
#log syslog { debug, trace, info, remote, warning, error, auth, fatal, bug };
log stderr all;

{{- if ne $bgpd_mode "RR" }}
# Override router ID
router id {{$local_ipaddr}};
{{- end }}

# Turn on global debugging of all protocols
debug protocols all;

# This pseudo-protocol watches all interface up/down events.
protocol device {
  scan time 2;    # Scan interfaces every 2 seconds
}

{{if ne $bgpd_mode "RR"}}
# Node-specific global configuration options

listen bgp address {{$local_ipaddr}} port {{$node_bgp_port}};

filter exported_by_bgp {
  if ( (ifname ~ "tap*") || (ifname ~ "cali*") || (ifname ~ "dummy1") || (ifname ~ "lo")) then {
    if net != 0.0.0.0/0 then accept;
  }
  reject;
}

# Configure synchronization between BIRD's routing tables and the
# kernel.
protocol kernel {
  learn;          # Learn all alien routes from the kernel
  persist;        # Don't remove routes on bird shutdown
  scan time 2;    # Scan kernel routing table every 2 seconds
  import all;
  export all;     # Default is export none
  merge paths;    # For ECMP in routing table
  graceful restart;
}

protocol direct {
   debug all;
   interface "-docker*", "*";
}

{{end}}

{{- if eq $bgpd_mode "RR" -}}

listen bgp address {{$local_ipaddr}} port {{$rr_bgp_port}};


  {{- $our_rr_key := printf "%s/rr_v4/%s" $p_calico $local_ipaddr -}}
  {{- if ls $our_rr_key -}}
    {{- $our_rr_data := json (getv $our_rr_key) -}}
    {{- $our_cluster_id := $our_rr_data.cluster_id -}}
    {{- $local_asnum := or $our_rr_data.as_num $global_asnum -}}

    {{- if ls (printf "%s/rr_v4" $p_calico) }}


###
# RR mode. Sessions with another RR from my rack (with the same 'cluster_id')
    {{- range gets (printf "%s/rr_v4/*" $p_calico) -}}
      {{- $data := json .Value -}}
      {{- $rr_ipaddr := $data.ip -}}
      {{- $name := printf "RR-%s" $rr_ipaddr -}}
      {{- if ne $rr_ipaddr $local_ipaddr -}}
        {{- if eq $data.cluster_id $our_cluster_id -}}
          {{- $rr_bgp_port_str := printf "port %s" (or $data.bgp_port $rr_bgp_port) }}
protocol bgp '{{$name}}' {
  local as {{$local_asnum}};
  neighbor {{$rr_ipaddr}} {{$rr_bgp_port_str}} as {{$local_asnum}};
  description "{{$name}}";
  multihop;
  import all;
  export all;
  next hop keep;
  add paths;     # For ECMP in BGP session with TOR
  source address {{$local_ipaddr}};
}
{{end}}{{end}}{{end}}{{end}}

  {{- if ls (printf "%s/host" $p_calico) }}


###
# RR mode. Sessions with nodes in my rack
    {{- range $cnode := lsdir (printf "%s/host" $p_calico) -}}
      {{- $node_peers_key := printf "%s/host/%s/peer_v4" $p_calico $cnode -}}
      {{- if ls $node_peers_key -}}
        {{- range $peer := gets (printf "%s/*" $node_peers_key) -}}
          {{- $data := json $peer.Value -}}
          {{- if eq $data.ip $local_ipaddr -}}
            {{- $cnode_ip := getv (printf "%s/host/%s/ip_addr_v4" $p_calico $cnode) -}}
            {{- $name := printf "node-%s" $cnode_ip }}
protocol bgp '{{$name}}' {
  local as {{getv (printf "%s/host/%s/as_num" $p_calico $cnode) $global_asnum}};
  neighbor {{$cnode_ip}} as {{getv (printf "%s/host/%s/as_num" $p_calico $cnode) $global_asnum}};
  description "{{$name}}";
  multihop;
  rr client;
  rr cluster id {{$our_cluster_id}};
  import all;
  export all;
  add paths;
  next hop keep;
  source address {{$local_ipaddr}};
}
{{end}}{{end}}{{end}}{{end}}{{end}}

  {{- if exists (printf "%s/global/peer_v4" $p_calico) }}


###
# RR mode. Sessions with global peers
    {{- range gets (printf "%s/global/peer_v4/*" $p_calico) }}
      {{- $data := json .Value -}}
      {{- if ne $data.ip $local_ipaddr -}}
        {{- if eq $data.as_num $local_asnum }}
protocol bgp 'global-peer-iBGP-{{$data.ip}}' {
  local as {{$local_asnum}};
  neighbor {{$data.ip}} as {{$local_asnum}};
  description "global-peer-iBGP-{{$data.ip}}";
  rr client;
  rr cluster id {{$our_cluster_id}};
  multihop;
  import all;
  export all;
  next hop keep;
  add paths;     # For ECMP in BGP session with TOR
  source address {{$local_ipaddr}};
}
{{end}}{{end}}{{end}}{{end}}

  {{ if ls (printf "%s/racks/%s" $p_mr $rack_no) }}
    {{- $tor_ipaddr_key := printf "%s/racks/%s/tor" $p_mr $rack_no -}}
    {{- if exists $tor_ipaddr_key -}}
      {{- $tor_asnum := getv (printf "%s/racks/%s/as_number" $p_mr $rack_no) $local_asnum -}}
      {{- $tor_bgp_port_str := printf "port %s" (getv (printf "%s/racks/%s/bgpport" $p_mr $rack_no) $tor_bgp_port) -}}
      {{- $tor_ipaddr := getv $tor_ipaddr_key }}

###
# session with TOR switch
protocol bgp 'TOR-rack{{$rack_no}}-{{$tor_ipaddr}}' {
  local as {{$tor_asnum}};
  neighbor {{$tor_ipaddr}} {{$tor_bgp_port_str}} as {{$tor_asnum}};
  description "TOR-{{$tor_ipaddr}}";
  multihop;
  rr client;
  import all;
  export all;
  next hop keep;
  add paths;     # For ECMP in BGP session with TOR
  source address {{$local_ipaddr}};
}
{{end}}{{end}}

{{end}}
{{else}}

  {{- $our_node_key := printf "%s/host/%s" $p_calico $local_hostname -}}
  {{- $local_asnum := getv (printf "%s/as_num" $our_node_key) $global_asnum -}}
  {{- if ls (printf "%s/peer_v4" $our_node_key) }}

###
# Node mode. Sessions with my local peers
    {{- range $peer := gets (printf "%s/peer_v4/*" $our_node_key) -}}
      {{- $peer_data := json $peer.Value -}}
      {{- $rr_data := json (getv (printf "%s/rr_v4/%s" $p_calico $peer_data.ip) "{}") }}
      {{- $peer_bgp_port_str := printf "port %s" (or $peer_data.bgp_port $rr_data.bgp_port $rr_bgp_port) -}}
      {{- $name := printf "peer-%s" $peer_data.ip }}
protocol bgp '{{$name}}' {
  local as {{$peer_data.as_num}};
  neighbor {{$peer_data.ip}} {{$peer_bgp_port_str}} as {{$peer_data.as_num}};
  description "{{$name}}";
  import all;
  export filter exported_by_bgp;
  add paths;
  next hop self;
  source address {{$local_ipaddr}};
}
    {{- end -}}
  {{- end -}}

  {{- if ls (printf "%s/global/peer_v4" $p_calico) }}

###
# Node mode. Sessions with global peers
    {{- range gets (printf "%s/global/peer_v4/*" $p_calico) }}
      {{- $data := json .Value -}}
      {{- $name := printf "global-peer-%s" $data.ip }}
protocol bgp '{{$name}}' {
  local as {{$local_asnum}};
  neighbor {{$data.ip}} as {{or $data.as_num $local_asnum}};
  description "{{$name}}";
  multihop;
  import all;
  export filter exported_by_bgp;
  next hop keep;
  add paths;     # For ECMP in BGP session with TOR
  source address {{$local_ipaddr}};
}
    {{end}}
  {{end}}

{{end}}
